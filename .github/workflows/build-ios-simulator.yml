name: Create an iOS Simulator build

on:
  push:
    paths:
      - '*'
      - '.github/workflows/build-ios-simulator.yml'
      - 'ios/**'
      - 'src/**'
      - '!**/*.md'
    branches:
      - main

jobs:
  build-ios-simulator:
    name: Create an iOS Simulator build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      # 'corepack enable' is needed for now till it's experimental, may remove the command once it becomes stable in later node releases
      - name: Enable Corepack
        run: corepack enable

      # Setup Web environment to install packages.
      - name: Setup Web environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - uses: hendrikmuhs/ccache-action@v1.2
        name: Xcode Compile Cache
        with:
          key: ${{ runner.os }}-ccache # makes a unique key w/related restore key internally
          create-symlink: true
          max-size: 1500M

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-modules-

      # Here '--immutable' will only use commited 'yarn.lock', and will throw error if some update is needed
      - name: Install node_modules
        run: yarn install --immutable

      - name: Restore Pods cache
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-

      - name: Restore build artifacts from cache
        uses: actions/cache@v4
        with:
          path: ios/build
          key: ${{ runner.os }}-ios-derived-data-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-ios-derived-data-

      - name: Install Pod files
        run: npx pod-install ios

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Run simulator build command
        working-directory: ios
        run: |
          export CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros
          export CCACHE_FILECLONE=true
          export CCACHE_DEPEND=true
          export CCACHE_INODECACHE=true
          export CCACHE_LIMIT_MULTIPLE=0.95
          ccache -s
          set -o pipefail
          xcodebuild \
          CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++ \
          -scheme react_native_UI_Templates \
          -workspace react_native_UI_Templates.xcworkspace \
          -sdk iphonesimulator \
          -configuration Release \
          -derivedDataPath build | xcpretty
          ccache -s

      - name: Store build .app file as zip
        working-directory: ios
        run: |
          cd build/Build/Products/Release-iphonesimulator
          mkdir -p output
          zip -r -y -o output/react_native_ui_templates.zip react_native_ui_templates.app

      - name: Save build file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rn_ui_templates_ios
          path: ios/build/Build/Products/Release-iphonesimulator/output
